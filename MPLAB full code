/*
* LAB Name: CCP-CompareMode
* LAB Number: 12
* Author: Edvin Jose Vakaparamban
* 
*/
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = ON        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF 

#include <xc.h>
#include <stdint.h>
#define _XTAL_FREQ 16000000
uint8_t X=0; // Counter For Compare Match Events
 
void main(void) 
{
  //--[ Configure The IO Ports ]--
  // Set The Output Pin For The LED
  TRISC4=0;
  RC4=0; // Initially OFF
 
  //--[ Configure The Timer1 Module To Operate In Timer Mode ]--
  TMR1 = 0;
  T1CKPS0 = 0;
  T1CKPS1 = 0;
  TMR1CS = 0;
  TMR1ON = 1;
 
  //--[ Configure The CCP1 Module To Operate in Compare Mode ]--
  // Preload The CCPR1 Register
  CCPR1 = 65000;
  // CCP in Compare Mode, CCPx Pin Is Unchanged & Trigger Special Event
  CCP1M0 = 1;
  CCP1M1 = 1;
  CCP1M2 = 0;
  CCP1M3 = 1;
 
  // Enable CCP1 Interrupt
  CCP1IE = 1;
  PEIE = 1;
  GIE = 1;
 
  // Create The Main Loop Of The System
  while (1)
  {
    // Stay Idle, everything is taken care of in the ISR
  }
  return;
}
 
// Write The ISR Handler
void __interrupt() ISR(void)
{
  if ( CCP1IF )
  {
    X++;
    if (X==31)
    {
      // Toggle The LED
      RC4 = ~RC4;
      X = 0;
    }
    // Clear The Interrupt Flag Bit
    CCP1IF = 0;
  }
}
